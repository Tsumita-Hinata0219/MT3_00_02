#include "Function.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <assert.h>
#include <Novice.h>

Matrix4x4 Add(const Matrix4x4& m1, const Matrix4x4& m2) {
	Matrix4x4 result;

	result.m[0][0] = m1.m[0][0] + m2.m[0][0];
	result.m[0][1] = m1.m[0][1] + m2.m[0][1];
	result.m[0][2] = m1.m[0][2] + m2.m[0][2];
	result.m[0][3] = m1.m[0][3] + m2.m[0][3];

	result.m[1][0] = m1.m[1][0] + m2.m[1][0];
	result.m[1][1] = m1.m[1][1] + m2.m[1][1];
	result.m[1][2] = m1.m[1][2] + m2.m[1][2];
	result.m[1][3] = m1.m[1][3] + m2.m[1][3];

	result.m[2][0] = m1.m[2][0] + m2.m[2][0];
	result.m[2][1] = m1.m[2][1] + m2.m[2][1];
	result.m[2][2] = m1.m[2][2] + m2.m[2][2];
	result.m[2][3] = m1.m[2][3] + m2.m[2][3];

	result.m[3][0] = m1.m[3][0] + m2.m[3][0];
	result.m[3][1] = m1.m[3][1] + m2.m[3][1];
	result.m[3][2] = m1.m[3][2] + m2.m[3][2];
	result.m[3][3] = m1.m[3][3] + m2.m[3][3];

	return result;
}


Matrix4x4 Subtract(const Matrix4x4& m1, const Matrix4x4& m2) {
	Matrix4x4 result;

	result.m[0][0] = m1.m[0][0] - m2.m[0][0];
	result.m[0][1] = m1.m[0][1] - m2.m[0][1];
	result.m[0][2] = m1.m[0][2] - m2.m[0][2];
	result.m[0][3] = m1.m[0][3] - m2.m[0][3];

	result.m[1][0] = m1.m[1][0] - m2.m[1][0];
	result.m[1][1] = m1.m[1][1] - m2.m[1][1];
	result.m[1][2] = m1.m[1][2] - m2.m[1][2];
	result.m[1][3] = m1.m[1][3] - m2.m[1][3];

	result.m[2][0] = m1.m[2][0] - m2.m[2][0];
	result.m[2][1] = m1.m[2][1] - m2.m[2][1];
	result.m[2][2] = m1.m[2][2] - m2.m[2][2];
	result.m[2][3] = m1.m[2][3] - m2.m[2][3];

	result.m[3][0] = m1.m[3][0] - m2.m[3][0];
	result.m[3][1] = m1.m[3][1] - m2.m[3][1];
	result.m[3][2] = m1.m[3][2] - m2.m[3][2];
	result.m[3][3] = m1.m[3][3] - m2.m[3][3];

	return result;
}


Matrix4x4 Multiply(const Matrix4x4& m1, const Matrix4x4& m2) {
	Matrix4x4 result;

	result.m[0][0] = m1.m[0][0] * m2.m[0][0] + m1.m[0][1] * m2.m[1][0] +
		m1.m[0][2] * m2.m[2][0] + m1.m[0][3] * m2.m[3][0];

	result.m[0][1] = m1.m[0][0] * m2.m[0][1] + m1.m[0][1] * m2.m[1][1] +
		m1.m[0][2] * m2.m[2][1] + m1.m[0][3] * m2.m[3][1];

	result.m[0][2] = m1.m[0][0] * m2.m[0][2] + m1.m[0][1] * m2.m[1][2] +
		m1.m[0][2] * m2.m[2][2] + m1.m[0][3] * m2.m[3][2];

	result.m[0][3] = m1.m[0][0] * m2.m[0][3] + m1.m[0][1] * m2.m[1][3] +
		m1.m[0][2] * m2.m[2][3] + m1.m[0][3] * m2.m[3][3];


	result.m[1][0] = m1.m[1][0] * m2.m[0][0] + m1.m[1][1] * m2.m[1][0] +
		m1.m[1][2] * m2.m[2][0] + m1.m[1][3] * m2.m[3][0];

	result.m[1][1] = m1.m[1][0] * m2.m[0][1] + m1.m[1][1] * m2.m[1][1] +
		m1.m[1][2] * m2.m[2][1] + m1.m[1][3] * m2.m[3][1];

	result.m[1][2] = m1.m[1][0] * m2.m[0][2] + m1.m[1][1] * m2.m[1][2] +
		m1.m[1][2] * m2.m[2][2] + m1.m[1][3] * m2.m[3][2];

	result.m[1][3] = m1.m[1][0] * m2.m[0][3] + m1.m[1][1] * m2.m[1][3] +
		m1.m[1][2] * m2.m[2][3] + m1.m[1][3] * m2.m[3][3];


	result.m[2][0] = m1.m[2][0] * m2.m[0][0] + m1.m[2][1] * m2.m[1][0] +
		m1.m[2][2] * m2.m[2][0] + m1.m[2][3] * m2.m[3][0];

	result.m[2][1] = m1.m[2][0] * m2.m[0][1] + m1.m[2][1] * m2.m[1][1] +
		m1.m[2][2] * m2.m[2][1] + m1.m[2][3] * m2.m[3][1];

	result.m[2][2] = m1.m[2][0] * m2.m[0][2] + m1.m[2][1] * m2.m[1][2] +
		m1.m[2][2] * m2.m[2][2] + m1.m[2][3] * m2.m[3][2];

	result.m[2][3] = m1.m[2][0] * m2.m[0][3] + m1.m[2][1] * m2.m[1][3] +
		m1.m[2][2] * m2.m[2][3] + m1.m[2][3] * m2.m[3][3];


	result.m[3][0] = m1.m[3][0] * m2.m[0][0] + m1.m[3][1] * m2.m[1][0] +
		m1.m[3][2] * m2.m[2][0] + m1.m[3][3] * m2.m[3][0];

	result.m[3][1] = m1.m[3][0] * m2.m[0][1] + m1.m[3][1] * m2.m[1][1] +
		m1.m[3][2] * m2.m[2][1] + m1.m[3][3] * m2.m[3][1];

	result.m[3][2] = m1.m[3][0] * m2.m[0][2] + m1.m[3][1] * m2.m[1][2] +
		m1.m[3][2] * m2.m[2][2] + m1.m[3][3] * m2.m[3][2];

	result.m[3][3] = m1.m[3][0] * m2.m[0][3] + m1.m[3][1] * m2.m[1][3] +
		m1.m[3][2] * m2.m[2][3] + m1.m[3][3] * m2.m[3][3];


	return result;
}


Matrix4x4 Inverse(const Matrix4x4& m) {
	Matrix4x4 result;

	float determinant = 
		+(m.m[0][0] * m.m[1][1] * m.m[2][2] * m.m[3][3])
		+ (m.m[0][0] * m.m[1][2] * m.m[2][3] * m.m[3][1])
		+ (m.m[0][0] * m.m[1][3] * m.m[2][1] * m.m[3][2])

		- (m.m[0][0] * m.m[1][3] * m.m[2][2] * m.m[3][1])
		- (m.m[0][0] * m.m[1][2] * m.m[2][1] * m.m[3][3])
		- (m.m[0][0] * m.m[1][1] * m.m[2][3] * m.m[3][2])

		- (m.m[0][1] * m.m[1][0] * m.m[2][2] * m.m[3][3])
		- (m.m[0][2] * m.m[1][0] * m.m[2][3] * m.m[3][1])
		- (m.m[0][3] * m.m[1][0] * m.m[2][1] * m.m[3][2])

		+ (m.m[0][3] * m.m[1][0] * m.m[2][2] * m.m[3][1])
		+ (m.m[0][2] * m.m[1][0] * m.m[2][1] * m.m[3][3])
		+ (m.m[0][1] * m.m[1][0] * m.m[2][3] * m.m[3][2])

		+ (m.m[0][1] * m.m[1][2] * m.m[2][0] * m.m[3][3])
		+ (m.m[0][2] * m.m[1][3] * m.m[2][0] * m.m[3][1])
		+ (m.m[0][3] * m.m[1][1] * m.m[2][0] * m.m[3][2])


		- (m.m[0][3] * m.m[1][2] * m.m[2][0] * m.m[3][1])
		- (m.m[0][2] * m.m[1][1] * m.m[2][0] * m.m[3][3])
		- (m.m[0][1] * m.m[1][3] * m.m[2][0] * m.m[3][2])

		- (m.m[0][1] * m.m[1][2] * m.m[2][3] * m.m[3][0])
		- (m.m[0][2] * m.m[1][3] * m.m[2][1] * m.m[3][0])
		- (m.m[0][3] * m.m[1][1] * m.m[2][2] * m.m[3][0])

		+ (m.m[0][3] * m.m[1][2] * m.m[2][1] * m.m[3][0])
		+ (m.m[0][2] * m.m[1][1] * m.m[2][3] * m.m[3][0])
		+ (m.m[0][1] * m.m[1][3] * m.m[2][2] * m.m[3][0]);

	assert(determinant != 0.0f);



	result.m[0][0] = (1 / determinant) * (
		+(m.m[1][1] * m.m[2][2] * m.m[3][3]) 
		+(m.m[1][2] * m.m[2][3] * m.m[3][1])
		+(m.m[1][3] * m.m[2][1] * m.m[3][2])
		-(m.m[1][3] * m.m[2][2] * m.m[3][1])
		-(m.m[1][2] * m.m[2][1] * m.m[3][3])
		-(m.m[1][1] * m.m[2][3] * m.m[3][2]));

	result.m[0][1] = (1 / determinant) * (
		-(m.m[0][2] * m.m[2][3] * m.m[3][3]) 
		-(m.m[0][2] * m.m[2][3] * m.m[3][1])
		-(m.m[0][3] * m.m[2][1] * m.m[3][2])
		+(m.m[0][3] * m.m[2][2] * m.m[3][2])
		+(m.m[0][2] * m.m[2][1] * m.m[3][3])
		+(m.m[0][1] * m.m[2][3] * m.m[3][2]));

	result.m[0][2] = (1 / determinant) * (
		+(m.m[0][1] * m.m[1][2] * m.m[3][3]) 
		+(m.m[0][2] * m.m[1][3] * m.m[3][1])
		+(m.m[0][3] * m.m[1][1] * m.m[3][2])
		-(m.m[0][3] * m.m[1][2] * m.m[3][1])
		-(m.m[0][2] * m.m[1][1] * m.m[3][3])
		-(m.m[0][1] * m.m[1][3] * m.m[3][2]));

	result.m[0][3] = (1 / determinant) * (
		-(m.m[0][1] * m.m[1][2] * m.m[2][3])
		-(m.m[0][2] * m.m[1][3] * m.m[2][1])
		-(m.m[0][3] * m.m[1][1] * m.m[2][2])
		+(m.m[0][3] * m.m[1][2] * m.m[2][1])
		+(m.m[0][2] * m.m[1][1] * m.m[2][3])
		+(m.m[0][1] * m.m[1][3] * m.m[2][2]));



	result.m[1][0] = (1 / determinant) * (
		-(m.m[1][0] * m.m[2][2] * m.m[3][3]) 
		-(m.m[1][2] * m.m[2][3] * m.m[3][0])
		-(m.m[1][3] * m.m[2][0] * m.m[3][2])
		+(m.m[1][3] * m.m[2][2] * m.m[3][0])
		+(m.m[1][2] * m.m[2][0] * m.m[3][3])
		+(m.m[1][0] * m.m[2][3] * m.m[3][2]));

	result.m[1][1] = (1 / determinant) * (
		-(m.m[0][0] * m.m[2][2] * m.m[3][3])
		+(m.m[0][2] * m.m[2][3] * m.m[3][0])
		+(m.m[0][3] * m.m[2][0] * m.m[3][2])
		-(m.m[0][3] * m.m[2][2] * m.m[3][0])
		-(m.m[0][2] * m.m[2][0] * m.m[3][3])
		-(m.m[0][0] * m.m[2][3] * m.m[3][2]));

	result.m[1][2] = (1 / determinant) * (
		-(m.m[0][0] * m.m[1][2] * m.m[3][3])
		-(m.m[0][2] * m.m[1][3] * m.m[3][0])
		-(m.m[0][3] * m.m[1][0] * m.m[3][2])
		+(m.m[0][3] * m.m[1][2] * m.m[3][0])
		+(m.m[0][2] * m.m[1][0] * m.m[3][3])
		+(m.m[0][0] * m.m[1][3] * m.m[3][2]));

	result.m[1][3] = (1 / determinant) * (
		+(m.m[0][0] * m.m[1][2] * m.m[2][3])
		+(m.m[0][2] * m.m[1][3] * m.m[2][0])
		+(m.m[0][3] * m.m[1][0] * m.m[2][2])
		-(m.m[0][3] * m.m[1][2] * m.m[2][0])
		-(m.m[0][2] * m.m[1][0] * m.m[2][3])
		-(m.m[0][0] * m.m[1][3] * m.m[2][2]));



	result.m[2][0] = (1 / determinant) * (
		+(m.m[1][0] * m.m[2][1] * m.m[3][3])
		+(m.m[1][1] * m.m[2][3] * m.m[3][0])
		+(m.m[1][3] * m.m[2][0] * m.m[3][1])
		-(m.m[1][3] * m.m[2][1] * m.m[3][0])
		-(m.m[1][1] * m.m[2][0] * m.m[3][3])
		-(m.m[1][0] * m.m[2][3] * m.m[3][1]));

	result.m[2][1] = (1 / determinant) * (
		-(m.m[0][0] * m.m[2][1] * m.m[3][3])
		-(m.m[0][1] * m.m[2][3] * m.m[3][0])
		-(m.m[0][3] * m.m[2][0] * m.m[3][1])
		+(m.m[0][3] * m.m[2][1] * m.m[3][0])
		+(m.m[0][1] * m.m[2][0] * m.m[3][3])
		+(m.m[0][0] * m.m[2][3] * m.m[3][1]));

	result.m[2][2] = (1 / determinant) * (
		+(m.m[0][0] * m.m[1][1] * m.m[3][3])
		+(m.m[0][1] * m.m[1][3] * m.m[3][0])
		+(m.m[0][3] * m.m[1][0] * m.m[3][1])
		-(m.m[0][3] * m.m[1][1] * m.m[3][0])
		-(m.m[0][1] * m.m[1][0] * m.m[3][3])
		-(m.m[0][0] * m.m[1][3] * m.m[3][1]));

	result.m[2][3] = (1 / determinant) * (
		-(m.m[0][0] * m.m[1][1] * m.m[2][3])
		-(m.m[0][1] * m.m[1][3] * m.m[2][0])
		-(m.m[0][3] * m.m[1][0] * m.m[2][1])
		+(m.m[0][3] * m.m[1][1] * m.m[2][0])
		+(m.m[0][1] * m.m[1][0] * m.m[2][3])
		+(m.m[0][0] * m.m[1][3] * m.m[2][1]));



	result.m[3][0] = (1 / determinant) * (
		-(m.m[1][0] * m.m[2][1] * m.m[3][2])
		-(m.m[1][1] * m.m[2][2] * m.m[3][0])
		-(m.m[1][2] * m.m[2][0] * m.m[3][1])
		+(m.m[1][2] * m.m[2][1] * m.m[3][0])
		+(m.m[1][1] * m.m[2][0] * m.m[3][2])
		+(m.m[1][0] * m.m[2][2] * m.m[3][1]));

	result.m[3][1] = (1 / determinant) * (
		+(m.m[0][0] * m.m[2][1] * m.m[3][2])
		+(m.m[0][1] * m.m[2][2] * m.m[3][0])
		+(m.m[0][2] * m.m[2][0] * m.m[3][1])
		-(m.m[0][2] * m.m[2][1] * m.m[3][0])
		-(m.m[0][1] * m.m[2][0] * m.m[3][2])
		-(m.m[0][0] * m.m[2][2] * m.m[3][1]));

	result.m[3][2] = (1 / determinant) * (
		-(m.m[0][0] * m.m[1][1] * m.m[3][2])
		-(m.m[0][1] * m.m[1][2] * m.m[3][0])
		-(m.m[0][2] * m.m[1][0] * m.m[3][1])
		+(m.m[0][2] * m.m[1][1] * m.m[3][0])
		+(m.m[0][1] * m.m[1][0] * m.m[3][2])
		+(m.m[0][0] * m.m[1][2] * m.m[3][1]));

	result.m[3][3] = (1 / determinant) * (
		+(m.m[0][0] * m.m[1][1] * m.m[2][2])
		+(m.m[0][1] * m.m[1][2] * m.m[2][0])
		+(m.m[0][2] * m.m[1][0] * m.m[2][1])
		-(m.m[0][2] * m.m[1][1] * m.m[2][0])
		-(m.m[0][1] * m.m[1][0] * m.m[2][2])
		-(m.m[0][0] * m.m[1][2] * m.m[2][1]));


	return result;
}


Matrix4x4 Transpose(const Matrix4x4& m) {
	Matrix4x4 result;

	result.m[0][0] = m.m[0][0];
	result.m[0][1] = m.m[1][0];
	result.m[0][2] = m.m[2][0];
	result.m[0][3] = m.m[3][0];

	result.m[1][0] = m.m[0][1];
	result.m[1][1] = m.m[1][1];
	result.m[1][2] = m.m[2][1];
	result.m[1][3] = m.m[3][1];

	result.m[2][0] = m.m[0][2];
	result.m[2][1] = m.m[1][2];
	result.m[2][2] = m.m[2][2];
	result.m[2][3] = m.m[3][2];

	result.m[3][0] = m.m[0][3];
	result.m[3][1] = m.m[1][3];
	result.m[3][2] = m.m[2][3];
	result.m[3][3] = m.m[3][3];


	return result;
}


Matrix4x4 MakeIdentity4x4()
{
	Matrix4x4 result;

	result.m[0][0] = 1.0f;
	result.m[0][1] = 0.0f;
	result.m[0][2] = 0.0f;
	result.m[0][3] = 0.0f;

	result.m[1][0] = 0.0f;
	result.m[1][1] = 1.0f;
	result.m[1][2] = 0.0f;
	result.m[1][3] = 0.0f;

	result.m[2][0] = 0.0f;
	result.m[2][1] = 0.0f;
	result.m[2][2] = 1.0f;
	result.m[2][3] = 0.0f;

	result.m[3][0] = 0.0f;
	result.m[3][1] = 0.0f;
	result.m[3][2] = 0.0f;
	result.m[3][3] = 1.0f;

	return result;
}

void MatrixScreenPrintf(int x, int y, const Matrix4x4& matrix, const char* label)
{
	for (int row = 0; row < 4; ++row) {
		for (int column = 0; column < 4; ++column) {
			Novice::ScreenPrintf(
				x + column * kColumnWidth, y + row * kRowHeight, "%.02f", matrix.m[row][column]);

			Novice::ScreenPrintf(x + kColumnWidth * 3, y, "%s", label);
		}
	}
}


